/**
  ************************************************************************************
  * @file   : Tool_FastMath.cpp
  * @brief  : Fast-math support file. This file provides faster solutions to calculate
              commonly used mathematical function.
  * @author ：Manny Chen
  * @date   ：February,2019
  * @version：1.0
  ************************************************************************************
  ====================================================================================
                        ##### How to use this tool #####
  ====================================================================================
**/

/* Includes ------------------------------------------------------------------*/ 
#include <Tool_FastMath.h>

/* Functions -----------------------------------------------------------------*/
/* 测试高精度atan 二分法快速查找对应的值 */
// x = (0):(pi/1000):(pi/2*0.999); //0.0031
float matlab_tan[499] = 
{
    0.000000,0.003142,0.006283,0.009425,0.012567,0.015709,0.018852,0.021995,0.025138,0.028282,
    0.031426,0.034571,0.037717,0.040863,0.044011,0.047159,0.050308,0.053458,0.056609,0.059761,
    0.062915,0.066069,0.069225,0.072383,0.075541,0.078702,0.081864,0.085027,0.088192,0.091359,
    0.094528,0.097698,0.100871,0.104046,0.107222,0.110401,0.113582,0.116765,0.119951,0.123139,
    0.126329,0.129522,0.132718,0.135916,0.139117,0.142321,0.145528,0.148737,0.151950,0.155166,
    0.158384,0.161606,0.164832,0.168060,0.171292,0.174528,0.177767,0.181010,0.184256,0.187506,
    0.190760,0.194018,0.197280,0.200546,0.203816,0.207090,0.210369,0.213651,0.216939,0.220230,
    0.223526,0.226827,0.230133,0.233443,0.236759,0.240079,0.243404,0.246734,0.250070,0.253410,
    0.256756,0.260108,0.263465,0.266827,0.270195,0.273569,0.276949,0.280334,0.283726,0.287123,
    0.290527,0.293937,0.297353,0.300775,0.304205,0.307640,0.311082,0.314531,0.317987,0.321450,
    0.324920,0.328397,0.331881,0.335372,0.338870,0.342377,0.345890,0.349411,0.352940,0.356477,
    0.360022,0.363575,0.367136,0.370705,0.374283,0.377869,0.381463,0.385066,0.388678,0.392298,
    0.395928,0.399567,0.403214,0.406871,0.410538,0.414214,0.417899,0.421594,0.425299,0.429014,
    0.432739,0.436474,0.440219,0.443974,0.447741,0.451517,0.455305,0.459103,0.462912,0.466733,
    0.470564,0.474407,0.478262,0.482128,0.486005,0.489895,0.493797,0.497710,0.501636,0.505575,
    0.509525,0.513489,0.517465,0.521455,0.525457,0.529473,0.533502,0.537544,0.541601,0.545671,
    0.549755,0.553853,0.557965,0.562092,0.566234,0.570390,0.574561,0.578747,0.582949,0.587166,
    0.591398,0.595647,0.599911,0.604191,0.608488,0.612801,0.617130,0.621477,0.625840,0.630221,
    0.634619,0.639035,0.643468,0.647920,0.652389,0.656877,0.661384,0.665909,0.670453,0.675017,
    0.679599,0.684202,0.688824,0.693466,0.698129,0.702812,0.707516,0.712240,0.716986,0.721754,
    0.726543,0.731353,0.736187,0.741042,0.745920,0.750821,0.755745,0.760693,0.765665,0.770660,
    0.775680,0.780724,0.785793,0.790887,0.796006,0.801151,0.806322,0.811519,0.816743,0.821994,
    0.827272,0.832577,0.837911,0.843272,0.848662,0.854081,0.859529,0.865006,0.870513,0.876051,
    0.881619,0.887218,0.892848,0.898510,0.904204,0.909930,0.915689,0.921482,0.927308,0.933168,
    0.939062,0.944992,0.950957,0.956957,0.962994,0.969067,0.975178,0.981326,0.987512,0.993736,
    1.000000,1.006303,1.012646,1.019029,1.025454,1.031920,1.038428,1.044979,1.051572,1.058210,
    1.064892,1.071619,1.078391,1.085209,1.092074,1.098986,1.105946,1.112954,1.120012,1.127119,
    1.134277,1.141487,1.148748,1.156061,1.163428,1.170850,1.178325,1.185857,1.193445,1.201090,
    1.208792,1.216554,1.224375,1.232256,1.240199,1.248204,1.256272,1.264404,1.272600,1.280863,
    1.289192,1.297589,1.306055,1.314590,1.323197,1.331875,1.340626,1.349451,1.358351,1.367328,
    1.376382,1.385514,1.394727,1.404021,1.413396,1.422856,1.432401,1.442031,1.451750,1.461557,
    1.471455,1.481445,1.491529,1.501707,1.511982,1.522354,1.532827,1.543401,1.554078,1.564860,
    1.575748,1.586744,1.597851,1.609070,1.620403,1.631852,1.643418,1.655105,1.666914,1.678848,
    1.690908,1.703096,1.715416,1.727870,1.740459,1.753187,1.766055,1.779068,1.792226,1.805534,
    1.818993,1.832607,1.846379,1.860312,1.874408,1.888671,1.903105,1.917712,1.932496,1.947461,
    1.962610,1.977948,1.993477,2.009201,2.025126,2.041254,2.057590,2.074140,2.090906,2.107894,
    2.125108,2.142554,2.160236,2.178160,2.196331,2.214755,2.233436,2.252382,2.271597,2.291089,
    2.310864,2.330927,2.351287,2.371950,2.392923,2.414214,2.435830,2.457779,2.480070,2.502712,
    2.525712,2.549080,2.572825,2.596957,2.621486,2.646423,2.671778,2.697562,2.723787,2.750464,
    2.777607,2.805227,2.833339,2.861955,2.891091,2.920761,2.950980,2.981765,3.013133,3.045099,
    3.077683,3.110904,3.144780,3.179332,3.214582,3.250551,3.287262,3.324739,3.363007,3.402092,
    3.442023,3.482826,3.524531,3.567171,3.610777,3.655384,3.701028,3.747745,3.795575,3.844560,
    3.894743,3.946169,3.998886,4.052944,4.108397,4.165300,4.223711,4.283695,4.345314,4.408639,
    4.473743,4.540703,4.609601,4.680523,4.753563,4.828817,4.906390,4.986392,5.068939,5.154159,
    5.242184,5.333156,5.427229,5.524566,5.625340,5.729742,5.837970,5.950243,6.066792,6.187871,
    6.313752,6.444726,6.581114,6.723261,6.871542,7.026366,7.188180,7.357471,7.534773,7.720673,
    7.915815,8.120911,8.336744,8.564189,8.804210,9.057887,9.326424,9.611172,9.913651,10.235578,
    10.578895,10.945817,11.338874,11.760967,12.215448,12.706204,13.237770,13.815466,14.445585,15.135616,
    15.894545,16.733250,17.665030,18.706305,19.877609,21.204948,22.721758,24.471762,26.513256,28.925743,
    31.820517,35.358341,39.780357,45.465511,53.045364,63.656742,79.573280,106.100151,159.152847
 
};
 
 
/**
* @brief  拆半法查找
* @param  float *m_data
* @param  uint16_t m_len 数组元素个数给定,就不单独计算了麻烦,记得用sizeof不然数目瞎搞进去出错
* @retval 查找到合适返回 返回值*0.003142等于弧度单位
*/
static float half_interval_search(float *m_data_buf, uint16_t m_len, float m_data)
{
    /* 断言 */
//    assert(!(m_len % 2 == 0));//必须为奇数
//    assert(!(m_data < 0));    //必须>0
 
    uint16_t low_num = 0;
    uint16_t mid_num = m_len / 2 ;
    uint16_t high_num = m_len-1;
 
    //if (m_data < m_data_buf[low_num+1])
    //{
    //  /* 若是小于0.003142，返回0 */
    //  return low_num;
    //}
    if (m_data == m_data_buf[mid_num])
    {
        /* 若是等于1.000000，返回250 */
        return mid_num*0.003142f;
    }
    else if (m_data > m_data_buf[high_num])
    {
        /* 若是大于159.152847，返回498 */
        return high_num*0.003142f;
    }
 
    while (1)
    {
        if (m_data < m_data_buf[mid_num])
        {
            //找的数在左边
            if (mid_num - low_num == 1)
            {
                /* 搜索结束 */
                return low_num*0.003142f;
            }
            if (mid_num % 2 != 0)//奇数
            {
                if (m_data >= m_data_buf[mid_num - 1])
                    return (mid_num - 1)*0.003142f;
 
                /* 更新排序 */
                high_num = mid_num - 1;
                mid_num = mid_num / 2;
            }
            else//偶数
            {
                high_num = mid_num;
                mid_num = mid_num / 2;
            }
        }
        else
        {
            //找的数在右边
            if (high_num - mid_num == 1)
            {
                /* 搜索结束 */
                return high_num*0.003142f;
            }
            if (mid_num % 2 != 0)//奇数
            {
                if (m_data <= m_data_buf[mid_num + 1])
                    return (mid_num + 1)*0.003142f;
 
                /* 更新排序 */
                low_num = mid_num;
                mid_num = (high_num + mid_num) / 2 + 1;
            }
            else//偶数
            {
                low_num = mid_num;
                mid_num = (high_num + mid_num) / 2;
            }
        }
    }
}
 
 
/**
  * @brief  反正切查表计算，返回欧拉角
  * @param  float data
  * @retval uint8_t 欧拉角 只能是小于PI/2狐度的角
  */
float FastMath_Arctan(float data)
{
  return half_interval_search(matlab_tan, sizeof(matlab_tan) / sizeof(matlab_tan[0]),data);
}

/************************ COPYRIGHT(C) SCUT-ROBOTLAB **************************/
